import os
from environs import Env
from pyrogram import Client
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types, Dispatcher
# Import Users Keyboards:
# from tg_bot.keyboards.reply.user import kb_user_menu
from tg_bot.misc import rate_limit
# Import Filters:
from tg_bot.filters import IsPrivate
# IMport State Machine:
from aiogram.dispatcher import FSMContext
from tg_bot.states import UserDownloadVideo
# Import func for download from YT:
from tg_bot.download_from_yt import get_videos_resolution, download_user_file
#
from tg_bot.create_advertising import create_files_for_advertising

env = Env()
env.read_env(path='.env')


# ----- Handlers: Users Start ----- #
@rate_limit(limit=15)
async def user_start_and_menu(message: types.Message):
    """ Send start message to User.
    :param message: message from User.
    :return: None
    """
    text_hello = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.username} ü´°\n" \
                 f"–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∫–∞—á–∏–≤–∞—Ç—å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –ø—Ä—è–º–∏–∫–æ–º —Å YouTube üòâ\n" \
                 f"–î–ª—è —ç—Ç–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å—Å—ã–ª–∫—É –∏ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –¢–µ–±—è —Ñ–æ—Ä–º–∞—Ç:\n" \
                 f"- - - - -\n" \
                 f"P.S: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –í —Å–≤—è–∑–∏ —Å —á–µ–º, —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ " \
                 f"—Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–Ω–∏–∂–µ–Ω–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –ø–µ—Ä–µ–≤–µ–¥–µ–º –µ–≥–æ —É–∂–µ –Ω–∞ –±–æ–µ–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ ü´†"
    await message.answer(
        text=text_hello,
    )
    await UserDownloadVideo.user_download_video_audio_1.set()


@rate_limit(limit=5)
async def send_user_video_quality_options(message: types.Message, state: FSMContext):
    """Get info about video or audio, send info user and save info in state.
    :param message:  message(url) from User.
    :param state: State Machine.
    :return: None.
    """
    videos_url = str(message.text).strip()
    await message.delete()
    try:
        video_info = get_videos_resolution(videos_url)
        text_answer = f"–ì–æ—Ç–æ–≤–æ üëå\n" \
                      f"<b>–ò–º—è —Å–∫–∞—á–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞:</b> ¬´{str(video_info[0])}¬ª\n" \
                      f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b> {str(video_info[2])}\n" \
                      f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ:</b> {str(video_info[3])}\n" \
                      f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤:</b> {str(video_info[4])}\n"\
                      f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª:</b> {videos_url}"
        #  Create Markup with video resolutions:
        markup = types.InlineKeyboardMarkup()
        count_videos_resolutions = len(video_info[1])
        for video_resolve in range(0, count_videos_resolutions - 1, 3):
            buffer_button = (count_videos_resolutions - 1) - video_resolve
            if buffer_button < 2:
                if buffer_button == 1:
                    markup.row(
                        types.InlineKeyboardButton(
                            video_info[1][video_resolve],
                            callback_data=str(video_info[1][video_resolve]),
                        ),
                        types.InlineKeyboardButton(
                            video_info[1][video_resolve + 1],
                            callback_data=str(video_info[1][video_resolve + 1]),
                        ),
                    )
                elif buffer_button == 0:
                    markup.row(
                        types.InlineKeyboardButton(
                            video_info[1][video_resolve],
                            callback_data=str(video_info[1][video_resolve]),
                        ),
                    )
                break
            else:
                markup.row(
                    types.InlineKeyboardButton(
                        video_info[1][video_resolve],
                        callback_data=str(video_info[1][video_resolve]),
                    ),
                    types.InlineKeyboardButton(
                        video_info[1][video_resolve + 1],
                        callback_data=(video_info[1][video_resolve + 1]),
                    ),
                    types.InlineKeyboardButton(
                        video_info[1][video_resolve + 2],
                        callback_data=str(video_info[1][video_resolve + 2]),
                    ),
                )
        markup.row(
            types.InlineKeyboardButton(
                "Audio",
                callback_data="audio",
            ),
        )
        await message.answer(
            text=text_answer,
            reply_markup=markup,
        )
        async with state.proxy() as data:
            data["videos_url"] = videos_url
            data["username"] = message.from_user.username
        await UserDownloadVideo.user_download_video_audio_2.set()
    except Exception as ex:
        print(f"Error: {ex}")
        text_error = f"–û—à–∏–±–∫–∞ ü´£ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {videos_url} \n" \
                   f"–ü—Ä–æ—à—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –µ–µ –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ üßê"
        await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text_error,
        )
        await UserDownloadVideo.user_download_video_audio_1.set()


@rate_limit(limit=5)
async def download_file_user(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data_file_url = data.get("videos_url")
    file_resolution = callback.data
    await callback.message.delete()
    advertising_data = create_files_for_advertising()
    message_button = [
        [
            InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://t.me/freedom_cats")
        ]
    ]
    markup = InlineKeyboardMarkup(message_button)
    async with Client("my_account", env.str("API_ID"), env.str("API_HASH")) as app:
        await app.send_photo(
            str(data.get("username")),
            advertising_data[1],
            caption=advertising_data[0],
            reply_markup=markup,
        )
        file_data = download_user_file(str(data_file_url), file_resolution)
        await app.send_video(
            str(data.get("username")),
            f"{os.getcwd()}/tg_bot/user_files/{file_data[0]}.{file_data[1]}",
        )
        os.remove(f"{os.getcwd()}/tg_bot/user_files/{file_data[0]}.{file_data[1]}")
    await UserDownloadVideo.user_download_video_audio_1.set()


# ----- Handlers: Register User Base (–†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏) ----- #
def register_user_base(dp: Dispatcher):
    """
    –†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º handlers –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param dp: Dispatcher
    :return: register user handlers
    """
    # –†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º handlers:
    # is_admin - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –ø—Ä–∏ –≤—Ö–æ–¥–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - False:
    # /start:
    dp.register_message_handler(
        user_start_and_menu,
        IsPrivate,
        commands=["start"],
    )
    #  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ:
    dp.register_message_handler(
        send_user_video_quality_options,
        IsPrivate,
        state=UserDownloadVideo.user_download_video_audio_1,
    )
    dp.register_callback_query_handler(
        download_file_user,
        lambda callback_query: True,
        state=UserDownloadVideo.user_download_video_audio_2,
    )
